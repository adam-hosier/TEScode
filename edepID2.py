import numpy as np 
from uncertainties import unumpy as unp
from uncertainties import ufloat
import pylab as plt 
import os 
import pandas as pd
import matplotlib.colors as mcolors
from scipy.stats import binned_statistic_2d
from scipy import stats
from itertools import cycle 
import glob 
import os 
from lmfit import minimize, Parameters, report_fit, Model, Parameter
from lmfit.models import GaussianModel
from lmfit.models import SplitLorentzianModel 
from lmfit.models import VoigtModel 
from lmfit.models import PseudoVoigtModel
from lmfit.models import SkewedVoigtModel 
from lmfit.models import LinearModel 


#### Using actual theory convoluted spectra generated by Yuri 
tEl = 'Nd_'
cxfactor = '1e12'
ftheoryloc = str('C:\\data\\theory')
ftname = 'conv1.4_SP1000.00_1.00e+12_0_0_2000.dat'
tdat3 = pd.read_fwf(ftheoryloc+'\\'+str(tEl)+cxfactor+'\\'+str(ftname))
tdat3 = np.array(tdat3)

ftname4 = 'conv1.4_SP1000.00_1.00e+10_0_0_2000.dat'
tdat4 = pd.read_fwf(ftheoryloc+'\\'+str(tEl)+cxfactor+'\\'+str(ftname4))
tdat4 = np.array(tdat4)

ftname5 = 'conv1.4_SP1000.00_1.00e+11_0_0_2000.dat'
tdat5 = pd.read_fwf(ftheoryloc+'\\'+str(tEl)+cxfactor+'\\'+str(ftname5))
tdat5 = np.array(tdat5)

ftname6 = 'conv1.4_SP1000.00_2.00e+10_0_0_2000.dat'
tdat6 = pd.read_fwf(ftheoryloc+'\\'+str(tEl)+cxfactor+'\\'+str(ftname6))
tdat6 = np.array(tdat6)


iffit = False


NiTheory = np.array(pd.read_fwf("C:\\Users\\ahosi\\Downloads\\conv_SP1000.00_2.00e+11_0_0_2150_33.dat"))
CoTheory = np.array(pd.read_fwf("C:\\Users\\ahosi\\Downloads\\conv_SP1000.00_2.00e+11_0_0_2150_34.dat"))
TotTheory = np.array(pd.read_fwf("C:\\Users\\ahosi\\Downloads\\conv_SP1000.00_2.00e+11_0_0_2150.dat"))


def find_nearest(array, value):
    array = np.asarray(array)
    idx = (np.abs(array - value)).argmin()
    return idx


#floc = str('C:\\Users\\ahosi\\OneDrive\\Desktop\\calibratedTES_Dec2022')
# floc = str('C:\\data\\TES_Spectra_1eVbin')
# floc = str('C:\\Users\\ahosi\\OneDrive\\Desktop\\TES_Calibration_Lines\\20221221')
# floc2 = str('C:\\Users\\ahosi\\OneDrive\\Desktop\\TES_Calibration_Lines\\SDr_Test\\')
floc3 = str('C:\\data\\TES_newcal')
#floc3 = str('C:\\Users\\ahosi\\Downloads\\TES_newcal')
f3names = glob.glob(floc3+'\\*.csv')


df3 = dict() 
for fpath in f3names: 
    df3[os.path.basename(fpath)[:-4]] = pd.read_csv(r""+fpath)


ftheoryloc = str('C:\\data\\theory')
teseffloc = str('C:\\data')
theoryEl = 'Nd'
eltitle = theoryEl
#floc = str('C:\\data\\calibratedTES_Dec2022')
ddest = str('C:\\data\\Line_ID_Nd')
# date = str('202212')
# day = str('19')
# runnum = str('0000')
date = str('202212')
day = str('21')
runnum = str('0002')

statelist = ['T', 'V', 'X', 'Z', 'AB', 'AD', 'AF']
#statelist = ["E", "G", "K", "M", "Q", "R", "T", "V", "X", "Z", "AB", "AD", "AF"]
#statelist = ['H', 'K', 'P', 'W', 'Y', 'AA']

coAdd = False
df = dict()

Cnames = ['energy', 'Intensity', 'Spec Charge', 'con1i', 'con2i', 'Numberi', 'Ji', '-',
          'con1f', 'con2f', 'Numberf', 'Jf', ':', 'Intensity2', '|']
tdat = pd.read_csv(r""+ftheoryloc+'\\'+theoryEl+'.csv', names=Cnames)

LList = pd.read_csv(r"C:\\Users\\ahosi\\Downloads\\1Klines.csv", names=['Energy', 'Intensity'])

#newcal = pd.read_csv(r"C:\\data\\TES_ReCaltest_Calibration.csv")


tenergy = tdat['energy']
tintensity = tdat['Intensity']


# arrx = df3['20221219_0000_BCDAC_cal']['20221219_0000_AA_Energy']
# arry = df3['20221219_0000_BCDAC_cal']['20221219_0000_AA_Counts']
arrx = df3['20221219_0000_AC_cal']['20221219_0000_AA_Energy']
arry = df3['20221219_0000_AC_cal']['20221219_0000_AA_Counts']



########## Fitting of lines for Line ID individually 

def datcoll(y, x, c, r):  #in single spectra loop
    res = dict()

    ydat = []   
    ydate = []                   
    wavedat = []
    pix = []
    bg = 0                  #background outside of radius of data 
    photc = []                  #photon count

    #Collecting data around a point of interest defined by 'c' and 'r' above, along with centroid calcs
    for i in range(1,2*r):
        ydat.append(y[c - r + i])
        wavedat.append(x[c-r+i])
        pix.append(c-r+i)
   
    ydat = np.array(ydat)
    ydate = np.sqrt(ydat)
    wavedat = np.array(wavedat)
    pix = np.array(pix) 

    res['y'] = ydat
    res['ye'] = ydate 
    res['x'] = pix 
    res['wave'] = wavedat

    return res 


def vfit(x, y, E, r, num_peaks=1, linbackground = False): 
    rez = dict() 
    ydat = []
    xdat = []
    c = find_nearest(x, E)
    for k in range(1,2*r):
        ydat.append(y[c - r + k])
        xdat.append(x[c-r+k])

    ydat = np.array(ydat)
    xdat = np.array(xdat)
    pars = Parameters()
    for i in range(num_peaks):
        if i == 0 and num_peaks > 1:
            rez['Composite model'] = VoigtModel(prefix='V'+str(i+1)+'_')
        elif i>0 and num_peaks > 1: 
            rez['Composite model'] += VoigtModel(prefix='V'+str(i+1)+'_')
        
        rez['Voigt_mod_'+str(i+1)] = VoigtModel(prefix='V'+str(i+1)+'_') 

        pars1 = rez['Voigt_mod_'+str(i+1)].make_params()
        pars1['V'+str(i+1)+'_center'].set(min=np.min(xdat), max=np.max(xdat), value = E, vary=True)
        #pars1['V'+str(i+1)+'_fwhm'].set(min=4.715, max=5.50, value=4.9475, vary=False)
        pars1['V'+str(i+1)+'_amplitude'].set(vary=True, min=0)
        #pars1['V'+str(i+1)+'_height'].set(vary=True, min=0)
        pars1['V'+str(i+1)+'_fwhm'].set(min=4)
        pars1['V'+str(i+1)+'_sigma'].set(value=2, min=0,  vary=True)
        #pars1['V'+str(i+1)+'_sigma'].set(min=1.3, max=1.50, value=1.9, vary=False)
        pars1['V'+str(i+1)+'_gamma'].set(value = 0, min =0, vary=False)

        if i>0 and num_peaks>1: 
            pars1['V'+str(i+1)+'_sigma'].set(expr='V1_sigma')
            #pars1['V'+str(i+1)+'_gamma'].set(expr='V1_gamma')

            #pars1['V'+str(i+1)+'_center'].set(expr ='V1_center+6.1', vary=True)
        

        pars.update(pars1)


    if num_peaks > 1: 
        if linbackground is True: 
            rez['Composite model'] += LinearModel(prefix='Background_')
            pars2 = LinearModel(prefix='Background_').make_params()
            pars2['Background_slope'].set(value=0, vary=True)
            pars2['Background_intercept'].set(value=np.min(ydat), vary=True)
            pars.update(pars2)
        modtemp = rez['Composite model']
    elif num_peaks == 1:
        if linbackground is True: 
            rez['Voigt_mod_1'] += LinearModel(prefix='Background_')
            pars2 = LinearModel(prefix='Background_').make_params()
            pars2['Background_slope'].set(value=0, vary=True)
            pars2['Background_intercept'].set(value=0, vary=True)
            pars.update(pars2)
        modtemp = rez['Voigt_mod_1']
    
    #out = modtemp.fit(ydat, pars, x=xdat, weights=np.sqrt(ydat), nan_policy='omit')
    out = modtemp.fit(ydat, pars, x=xdat, weights=np.sqrt(ydat))
    pars.update(out.params)

    neweval = modtemp.eval(pars, x=np.linspace(np.min(xdat), np.max(xdat), num=1000))
    comps = out.eval_components(x=np.linspace(np.min(xdat), np.max(xdat), num=1000))
    rez['Params'] = pars 
    rez['out'] = out
    rez['neweval'] = neweval 
    rez['xdat'] = xdat 
    rez['ydat'] = ydat 
    rez['num_data_points'] = k 
    rez['newevalx'] = np.linspace(np.min(xdat), np.max(xdat), num=1000)
    rez['comps'] = comps

    return rez 

##energy dependent 
# expstatelist = ['H', 'K', 'P', 'W', 'Y', 'AA']
# plottitle = '20221219_0000_Y_Counts'
# xd = df3['20221219_0000_BCDAC_cal']['20221219_0000_B_Energy']
# yd = df3['20221219_0000_BCDAC_cal'][plottitle]



#### T V X Z AB AD AF
##Density dependence data
#expstatelist = ['T', 'V', 'X', 'Z', 'AB', 'AD', 'AF']
expstatelist = ['T', 'AF', 'AD', 'AB', 'V', 'Z', 'X']
#expstatelist2 = ['H', 'P', 'W', 'Y', 'AA']
expstatelist2 = ['P', 'W', 'Y', 'AA']
# plottitle = '20221219_0000_H_Counts'

# xd = df3['20221219_0000_BCDAC_cal']['20221219_0000_H_Energy']
# yd = df3['20221219_0000_BCDAC_cal'][plottitle]
plottitle = '20221221_0002_AIOAHcal_T_Counts'
xd = df3['20221221_0002_AIOAH_cal']['20221221_0002_A_Energy']
yd = df3['20221221_0002_AIOAH_cal'][plottitle]

timenorm = [2165, 975, 1131, 1032]

beamcurr = [18.1,
    36,
    13.3,
    29]

beamen = [2.1, 2.25, 1.4, 1.8]

# beamcurr = [18.1,
#     18.1,
#     36,
#     13.3,
#     29]

# beamen = [2.1, 2.1, 2.25, 1.4, 1.8]




t_norm = [3163, 
    1769, 
    1394, 
    650, 
    328, 
    365, 
    3109]


tbd_lines = [1415.83,
    1424.17,
    1557.25,
    1572.99,
    1580.66,
    1593.13,
    1652.47,
    1774.46,
    1781.54,
    1807.04,
    1847.57,
    1920.77,
    1929.08,
    1972.84]


tofit = [842.64,
    865.94,
    876.00,
    884.12,
    932.62,
    942.75,
    964.29,
    976.96,
    984.83,
    999.39,
    1151.03,
    1157.89,
    1172.29,
    1198.50,
    1203.77,
    1208.12,
    1241.34,
    1360.30,
    1379.62,
    1386.26,
    1395.85,
    1415.83,
    1424.17,
    1461.77,
    1475.76,
    1494.18,
    1502.47,
    1522.32,
    1546.00,
    1557.25,
    1572.99,
    1580.66,
    1593.13,
    1606.39,
    1652.47,
    1711.60,
    1733.94,
    1774.46,
    1781.54,
    1807.04,
    1825.05,
    1847.57,
    1898.39,
    1920.77,
    1948.14]

# for k in tofit:
#     pltscale = []
#     npeak = 3
#     lenergy = k
#     npoints = 12
#     lback = False
#     test2 = vfit(xd, yd, lenergy, npoints, num_peaks=npeak, linbackground=lback)
#     rescolnames = ['line number', 'center', 'center unc', 'height', 'height unc', 'FWHM', 'FWHM unc', 'sigma', 'sigma unc', 'gamma', 'gamma unc', 'state', 'time']
#     touttest = np.zeros((1,13))
#     timecount = 0
#     plt.figure()
#     for state in expstatelist2:
#         #ptitle = str('20221219_0000_BCDACcal_')+str(state)+str('_Counts')
#         ptitle = str('20221219_0000_')+str(state)+str('_Counts')
#         xd = df3['20221219_0000_BCDAC_cal']['20221219_0000_H_Energy']
#         yd = df3['20221219_0000_BCDAC_cal'][ptitle]/timenorm[timecount]
#         test3 = vfit(xd, yd, lenergy, npoints, num_peaks=npeak, linbackground=lback)
#         pltscale.append(np.max(test3['neweval']))
#         paramlist = test3['Params'] 
#         outtest = np.zeros((1,13))

#         for ln in range(1,npeak+1): 

#             outdat = np.array([[ln, 
#                             paramlist['V'+str(ln)+'_center'].value, paramlist['V'+str(ln)+'_center'].stderr, 
#                             paramlist['V'+str(ln)+'_height'].value, paramlist['V'+str(ln)+'_height'].stderr, 
#                             paramlist['V'+str(ln)+'_fwhm'].value, paramlist['V'+str(ln)+'_fwhm'].stderr,
#                             paramlist['V'+str(ln)+'_sigma'].value, paramlist['V'+str(ln)+'_sigma'].stderr, 
#                             paramlist['V'+str(ln)+'_gamma'].value, paramlist['V'+str(ln)+'_gamma'].stderr, 
#                             str(state), timenorm[timecount]]])
            
#             touttest = np.vstack((touttest, outdat))
        
#         timecount += 1

#         plt.plot(xd, yd, label=state)
#         plt.plot(test3['newevalx'], test3['neweval'], label=state+' fit')
#     plt.ylim(top=np.max(pltscale)*1.2, bottom=0)
#     plt.xlim((lenergy-10, lenergy+10))
#     plt.minorticks_on()
#     plt.legend()
#     plt.savefig('C:\\Users\\ahosi\\OneDrive\\Desktop\\Results - Plots TN\\'+str(k)+' eV.png')
#     #plt.show()
#     plt.close() 

#     prepdata = pd.DataFrame(data = touttest, columns=rescolnames)
#     prepdata.to_excel('C:\\Users\\ahosi\\OneDrive\\Desktop\\Results TN\\testout '+str(k)+'.xlsx', index=False)


# pltscale = []
# npeak = 3
# lenergy = 1205
# npoints = 7
# lback = False
# test2 = vfit(xd, yd, lenergy, npoints, num_peaks=npeak, linbackground=lback)
# rescolnames = ['line number', 'center', 'center unc', 'height', 'height unc', 'FWHM', 'FWHM unc', 'sigma', 'sigma unc', 'gamma', 'gamma unc', 'state']
# touttest = np.zeros((1,12))
# # plt.figure()
# for state in expstatelist2:
#     #ptitle = str('20221219_0000_BCDACcal_')+str(state)+str('_Counts')
#     ptitle = str('20221219_0000_')+str(state)+str('_Counts')
#     xd = df3['20221219_0000_BCDAC_cal']['20221219_0000_H_Energy'][303:1803]
#     yd = df3['20221219_0000_BCDAC_cal'][ptitle][303:1803]
#     test3 = vfit(xd, yd, lenergy, npoints, num_peaks=npeak, linbackground=lback)
#     pltscale.append(np.max(test3['neweval']))
#     paramlist = test3['Params'] 
#     outtest = np.zeros((1,12))
#     for ln in range(1,npeak+1): 
#         outdat = np.array([[ln, 
#                           paramlist['V'+str(ln)+'_center'].value, paramlist['V'+str(ln)+'_center'].stderr, 
#                           paramlist['V'+str(ln)+'_height'].value, paramlist['V'+str(ln)+'_height'].stderr, 
#                           paramlist['V'+str(ln)+'_fwhm'].value, paramlist['V'+str(ln)+'_fwhm'].stderr,
#                           paramlist['V'+str(ln)+'_sigma'].value, paramlist['V'+str(ln)+'_sigma'].stderr, 
#                           paramlist['V'+str(ln)+'_gamma'].value, paramlist['V'+str(ln)+'_gamma'].stderr, 
#                           str(state)]])
        
#         touttest = np.vstack((touttest, outdat))

# #     plt.plot(xd, yd, label=state)
# #     plt.plot(test3['newevalx'], test3['neweval'], label=state+' fit')
# # plt.ylim(top=np.max(pltscale)*1.2, bottom=0)
# # plt.xlim((lenergy-10, lenergy+10))
# # plt.minorticks_on()
# # plt.legend()
# # plt.show()
# # plt.close() 

# prepdata = pd.DataFrame(data = touttest, columns=rescolnames)
# prepdata.to_excel('C:\\Users\\ahosi\\anaconda3\\envs\\TESenv\\TEScode\\testout.xlsx', index=False)

# plottitle = '20221219_0000_H_Counts'
# xd = df3['20221219_0000_BCDAC_cal']['20221219_0000_H_Energy']
# yd = df3['20221219_0000_BCDAC_cal'][plottitle]

plottitle = '20221221_0002_AIOAHcal_T_Counts'
xd = df3['20221221_0002_AIOAH_cal']['20221221_0002_A_Energy']
yd = df3['20221221_0002_AIOAH_cal'][plottitle]

# for state in expstatelist2: 
#     ptitle = str('20221219_0000_')+str(state)+str('_Counts')


fig, axs = plt.subplots(7, sharex=True, figsize=(22,10))
expstatelist2 = ['W', 'P', 'AA', 'Y']
i = 0
# for state in expstatelist2: 
#     ptitle = str('20221219_0000_')+str(state)+str('_Counts')
#     axs[i].plot(df3['20221219_0000_BCDAC_cal']['20221219_0000_H_Energy'][303:1803], df3['20221219_0000_BCDAC_cal'][ptitle][303:1803])
#     axs[i].minorticks_on()
#     axs[i].set_xlim(800,1900)
#     i+=1

for state in expstatelist: 
    ptitle = str('20221221_0002_AIOAHcal_')+str(state)+str('_Counts')
    #print(df3['20221221_0002_AIOAH_cal'].keys())
    print(np.shape(df3['20221221_0002_AIOAH_cal']))
    axs[i].plot(df3['20221221_0002_AIOAH_cal']['20221221_0002_A_Energy'], df3['20221221_0002_AIOAH_cal'][ptitle]/np.max(df3['20221221_0002_AIOAH_cal'][ptitle]))
    axs[i].minorticks_on()
    axs[i].set_xlim(800,1900)
    i+=1


fig.text(0.09, 0.5, 'Intensity (arb)', va='center', rotation='vertical')
fig.text(0.5, 0.07, 'Photon energy [eV]', ha='center')

fig.show()
plt.show()

maxnorm = []
#plt.figure() 
fig, ax = plt.subplots(4,1)
# tc = 0
# #expstatelist2 = ['H']
# for state in expstatelist2: 
#     # ptitle = str('20221219_0000_BCDACcal_')+str(state)+str('_Counts')
#     ptitle = str('20221219_0000_')+str(state)+str('_Counts')

#     xd = df3['20221219_0000_BCDAC_cal']['20221219_0000_H_Energy'][303:1803]
#     #yd = df3['20221221_0002_AIOAH_cal'][ptitle] / t_norm[tc]
#     #yd = df3['20221221_0002_AIOAH_cal'][ptitle] / np.max(df3['20221221_0002_AIOAH_cal'][ptitle])
#     # yd = df3['20221219_0000_BCDAC_cal'][ptitle] / df3['20221221_0002_AIOAH_cal'][ptitle][1042]


#     # yd = df3['20221219_0000_BCDAC_cal'][ptitle][303:1803]
#     yd = df3['20221219_0000_BCDAC_cal'][ptitle][303:1803]/timenorm[tc]
#     #yd = df3['20221219_0000_BCDAC_cal'][ptitle] / np.max(df3['20221219_0000_BCDAC_cal'][ptitle])

#     #yd = df3['20221221_0002_AIOAH_cal'][ptitle] 
#     plt.plot(xd, yd, label='State: '+str(state)+' , '+str(beamen[tc])+' keV, '+str(beamcurr[tc])+' mA')
#     maxnorm.append(np.max(df3['20221219_0000_BCDAC_cal'][ptitle] / np.max(df3['20221219_0000_BCDAC_cal'][ptitle])))
#     tc +=1 
# #plt.plot(xd, yd, c='r', label='data')
# # plt.plot(test1['newevalx'], test1['neweval'], c='b', label='fit')
# # plt.plot(test2['newevalx'], test2['neweval'], c='b')
# # plt.plot(test3['newevalx'], test3['neweval'], c='b')

# #plt.plot(test2['newevalx'], test2['neweval'], c='b')

# # plt.plot(test5['newevalx'], test5['neweval'], c='b')
# # plt.plot(test6['newevalx'], test6['neweval'], c='b')
# # plt.plot(test7['newevalx'], test7['neweval'], c='b')

# ###plotting theory 
#plt.plot(tdat3[:,0], np.max(yd)*tdat3[:,1]/np.max(tdat3[:,1]), label=ftname)
ax[0].plot(tdat3[:,0], np.max(yd)*tdat3[:,1]/np.max(tdat3[:,1]), label='2000 eV, 1e+12 e$^{-}$/cm$^{3}$', c='b')
ax[0].set_xlim(800,1900)
ax[0].minorticks_on()
#plt.plot(tdat4[:,0], np.max(yd)*tdat4[:,1]/np.max(tdat4[:,1]), label=ftname4)
ax[3].plot(tdat4[:,0], np.max(yd)*tdat4[:,1]/np.max(tdat4[:,1]), label='2000 eV, 1e+11 e$^{-}$/cm$^{3}$', c='r')
ax[3].set_xlim(800,1900)
ax[3].minorticks_on()
#plt.plot(tdat5[:,0], np.max(yd)*tdat5[:,1]/np.max(tdat5[:,1]), label=ftname5)
ax[1].plot(tdat5[:,0], np.max(yd)*tdat5[:,1]/np.max(tdat5[:,1]), label='2000 eV, 2e+10 e$^{-}$/cm$^{3}$', c='g')
ax[1].set_xlim(800,1900)
ax[1].minorticks_on()
#plt.plot(tdat6[:,0], np.max(yd)*tdat6[:,1]/np.max(tdat6[:,1]), label=ftname6)
ax[2].plot(tdat6[:,0], np.max(yd)*tdat6[:,1]/np.max(tdat6[:,1]), label='2000 eV, 1e+19 e$^{-}$/cm$^{3}$', c='k')
ax[2].set_xlim(800,1900)
ax[2].minorticks_on()
# # qlines = [1204, 1545.7, 1712, 1828, 1899, 1948, 1983]
# # qlines2 = [1240, 1606, 1733, 1876, 1953, 2007, 2047]
# # for t in qlines: 
# #     plt.axvline(x=t, c='k', ls='--')

# # for t in qlines2: 
# #     plt.axvline(x=t, c='g', ls='--')


# fitted_lines = [842.64,
#     865.94,
#     876.00,
#     884.12,
#     932.62,
#     942.75,
#     964.29,
#     976.96,
#     984.83,
#     999.39,
#     1151.03,
#     1157.89,
#     1172.29,
#     1203.89,
#     1241.34,
#     1360.30,
#     1379.62,
#     1386.26,
#     1395.85,
#     1461.77,
#     1475.76,
#     1494.18,
#     1502.47,
#     1522.32,
#     1546.00,
#     1606.39,
#     1711.60,
#     1733.94,
#     1825.05,
#     1898.39,
#     1984.78,
#     1948.14,
#     1415.83,
#     1424.17,
#     1557.25,
#     1572.99,
#     1580.66,
#     1593.13,
#     1652.47,
#     1774.46,
#     1781.54,
#     1807.04,
#     1847.57,
#     1920.77,
#     1929.08,
#     1972.84]

# tbd_lines = [1415.83,
#     1424.17,
#     1557.25,
#     1572.99,
#     1580.66,
#     1593.13,
#     1652.47,
#     1774.46,
#     1781.54,
#     1807.04,
#     1847.57,
#     1920.77,
#     1929.08,
#     1972.84]

# donelines = [842.64,
#     865.94,
#     932.62,
#     942.75,
#     964.29,
#     1151.03,
#     1157.89,
#     1172.29,
#     1203.89,
#     1360.30,
#     1415.83,
#     1424.17,
#     1461.77,
#     1475.76,
#     1502.47,
#     1522.32,
#     1546.00,
#     1711.60,
#     1733.94,
#     1825.05,
#     1847.57,
#     1898.39,
#     1920.77,
#     1948.14,
#     876.00,
#     884.12,
#     976.96,
#     984.83,
#     999.39,
#     1241.34,
#     1379.62,
#     1386.26,
#     1395.85,
#     1494.18,
#     1580.66,
#     1606.39]

# lcount = 0

# yd = np.array(yd)
# # for l in donelines: 
# #     plt.axvline(x=l, c='k', ls='--')
# #     # plt.text(l, yd[find_nearest(xd, l)]+300, str(lcount))
# #     #plt.text(l, yd[find_nearest(xd, l)]+0.02, str(lcount))
# #     #plt.text(l, 1.025+0.025*(-1)**(lcount), str(lcount))
# #     lcount += 1 

# # print(lcount)
# # for l in tbd_lines:
# #     # plt.text(l, yd[find_nearest(xd, l)]+300, str(lcount), c='g')
# #     plt.text(l, yd[find_nearest(xd, l)], str(lcount), c='g')
# #     lcount += 1

# # for l in range(npeak):
# #     plt.plot(test2['newevalx'], test2['comps']['V'+str(l+1)+'_'], label='Voigt #'+str(l+1))
# #plt.plot(TotTheory[:,0], TotTheory[:,1]/np.max(TotTheory[:,1]))
# # plt.plot(NiTheory[:,0], NiTheory[:,1]/np.max(NiTheory[:,1]), label='Ni', ls='--')
# # plt.plot(CoTheory[:,0], CoTheory[:,1]/np.max(CoTheory[:,1]), label='Co', ls='--')
#ax[3].set_xlabel('Energy (eV)')
#plt.xlabel('Energy (eV)')
#plt.ylabel('Intensity (arb)')
fig.text(0.03, 0.5, 'Intensity (arb)', va='center', rotation='vertical')
fig.text(0.5, 0.03, 'Photon energy [eV]', ha='center')
# plt.ylabel('Photon counts')
# #plt.title(str(plottitle))
# #plt.axhline(y=0, c='k', ls='--')
#plt.ylim(bottom=0)
fig.legend(loc='lower left')


# energyList = np.array(LList['Energy'])
# intensityList = np.array(LList['Intensity'])

# # inds = np.argsort(intensityList)
# # intensityList = intensityList[inds][::-1]
# # energyList = energyList[inds][::-1]

# # for i in range(1001):
# #     plt.vlines(x=energyList[i], ymin=0, ymax=intensityList[i])
# energyList = np.delete(energyList, 0)
# intensityList = np.delete(intensityList, 0)
# numLines = 300
# #for l in range(numLines):
#     #print(energyList[l], np.float(intensityList[l])*1e6)
#     #plt.vlines(x=float(energyList[l]), ymin=0, ymax=float(intensityList[l])*np.max(yd), ls='--', colors='k')

# # plt.xlim((np.min(test2['newevalx']), np.max(test2['newevalx'])))
# # plt.ylim((0, 1.05*np.max(test2['ydat'])))
# #plt.xlim((1125, 1300))
#plt.xlim((800, 1950))
# #plt.xlim((825, 1565))
fig.show()
#fig.close() 
# #print(plottitle)



# lInt = [0.004197804160858209,
#     0.16234338908343976,
#     0.4268694683375898,
#     0.9842147682981836,
#     ]

lInt = [0.048978378534972805/13.3, 1.1185763557575146/29, 3.040203123868412/18.1, 6.955979562676547/36]
lInte = [0.0022934159540772474/13.3, 0.025357497568184912/29, 0.0444062440717907/18.1, 0.08352713505850753/36]

lint4 = [0.0046422448157121534/13.3,
    0.07428962435056335/29,
    0.18249563047332842/18.1,
    0.43861757046829764/36]

lint4e = [0.0010799716163293585/13.3,
    0.0031063935573460827/29,
    0.00495634677902524/18.1,
    0.012602060041564342/36]

lint2 = [0.9773742311060422/13.3,3.673451038772508/29,3.938574601368325/18.1, 2.5712228135850537/36]

lint2e = [0.05148379730519897/13.3, 0.07160733763620547/29, 0.08734132392201785/18.1, 0.07167321401147883/36]

# lInte = [0.0007087625230776737, 0.006239376531490576, 0.009357599697283593, 0.024743422235572167]

lE = [1.4, 1.8, 2.1, 2.25]

lint3 = [0.14810513361469618/13.3, 0.40810631105070555/29,0.508614781361571/18.1 , 0.3394769546135643/36]

lint3e = [0.006089099402933326/13.3, 0.0049858033717749/29, 0.011317078538129745/18.1 ,0.012014989867844278/36]

plt.figure()
plt.plot(lE, lint2, marker='x', ls='-', c='b')
plt.plot(lE, lint3, marker='x', ls='-', c='r')
plt.errorbar(lE, lint2, lint2e, ls='none', capsize=4, c='b')
plt.errorbar(lE, lint3, lint3e, ls='none', capsize=4, c='r')
plt.plot(lE, lInt, marker='x', ls='-', c='g')
plt.errorbar(lE, lInt, lInte, ls='none', capsize=4, c='g')
plt.plot(lE, lint4, marker='x', ls='-', c='tab:purple')
plt.errorbar(lE, lint4, lint4e, ls='none', capsize=4, c='tab:purple')
plt.axvline(x=1.238, ls='--', c='k')
plt.axvline(x=2.134, ls='--', c='tab:grey')
plt.ylabel('Intensity (arb)')
plt.xlabel('Electron beam energy (keV)')
plt.minorticks_on()
plt.show()
plt.close()